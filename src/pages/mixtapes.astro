---
// src/pages/mixtapes.astro
import BaseHead from '../components/BaseHead.astro';
import { SITE_TITLE } from '../consts';
import { supabase } from "../lib/supabaseClient";

const { data: mixtapesData, error } = await supabase
  .from("mixtapes")
  .select("*")
  .order("created_at", { ascending: false });

// Transform mixtapes data for ScrollZoomList component
const mixtapes = mixtapesData?.map((m) => ({
  title: m.title || '',
  link: m.link || '#',
  category: m.category || '',
})) || [];
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Mixdown & Mastering - ${SITE_TITLE}`} description="Mixdown and Mastering services" />
    <style>
      @font-face {
        font-family: 'CastoroTitling';
        src: url('/fonts/CastoroTitling-Regular.woff') format('woff');
        font-weight: normal;
        font-style: normal;
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      
      body {
        background-color: #000000;
        color: #FFFFFF;
        font-family: Arial, Helvetica, sans-serif;
        min-height: 100vh;
        cursor: auto;
        overflow-x: hidden;
      }

      /* Background image styles */
      #bg-image {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(255, 0, 0, 0.1); /* fallback color for debugging */
        background-image: url('/images/pozadina.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        z-index: -1;
        pointer-events: none;
      }

      /* removed custom image cursor */
      
      #crosshair-x {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 1px;
        border-top: 1px solid #333333;
        pointer-events: none;
        z-index: 9998;
        transform: translateY(-50%);
      }
      
      #crosshair-y {
        position: fixed;
        top: 0;
        left: 0;
        width: 1px;
        height: 100vh;
        border-left: 1px solid #333333;
        pointer-events: none;
        z-index: 9998;
        transform: translateX(-50%);
      }
      
      /* Navigation Bar */
      #filter-nav {
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0 40px;
        position: relative;
      }
      
      #filters {
        display: flex;
        align-items: center;
        gap: 60px;
        flex: 1;
      }
      
      .filter-btn {
        font-family: Arial, Helvetica, sans-serif;
        letter-spacing: 5px;
        font-size: 20px;
        color: #FFFFFF;
        background: none;
        border: none;
        cursor: pointer;
        text-transform: uppercase;
        transition: color 0.3s ease;
        white-space: nowrap;
      }
      
      .filter-btn:hover {
        opacity: 0.8;
      }
      
      .filter-btn.active {
        color: #FF0000;
      }
      
      #close-btn {
        font-family: Arial, Helvetica, sans-serif;
        font-size: 20px;
        color: #FF0000;
        background: none;
        border: none;
        cursor: pointer;
        text-decoration: none;
        transition: opacity 0.3s ease;
      }
      
      #close-btn:hover {
        opacity: 0.7;
      }

      /* Burger Menu */
      #burger-menu {
        display: none;
        background: none;
        border: none;
        cursor: pointer;
        padding: 10px 10px 10px 0;
        position: relative;
        z-index: 1001;
      }

      #burger-menu span {
        display: block;
        line-height: 1;
      }

      /* Filter Overlay */
      #filter-overlay {
        position: fixed;
        top: 0;
        right: -100%;
        width: 100%;
        height: 100vh;
        background-color: #000000;
        z-index: 1000;
        transition: right 0.3s ease;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 40px;
      }

      #filter-overlay.active {
        right: 0;
      }

      #filter-overlay .filter-btn {
        font-family: Arial, Helvetica, sans-serif;
        font-size: 24px;
        margin: 0;
        white-space: normal;
        text-align: center;
        line-height: 1.2;
        max-width: 90vw;
        word-wrap: break-word;
        hyphens: auto;
      }

      /* Mixtapes List Styles */
      #mixtapes-list {
        padding: 20px 40px 40px 40px; /* top 20 to reduce header overlap */
        max-width: none; /* align left, no centering */
        margin: 0; /* align left */
        display: grid;
        gap: 5px;
      }

      .mixtape-item {
        height: 26px;
        display: flex;
        align-items: center;
      }

      /* Mobile adjustments */
      @media (max-width: 768px) {
        #mixtapes-list {
          display: flex;
          flex-direction: column;
          gap: 15px;
          flex-wrap: wrap;
          line-height: 26px;
          font-size: 18px;
          width: 350px;
          padding: 20px;
        }

        .mixtape-item {
          height: auto; /* let height adjust naturally */
        }

        .mixtape-link {
          font-size: 18px; /* base size on mobile */
        }

        .mixtape-link:hover {
          font-size: 20px; /* hover size on mobile */
        }
      }

      .mixtape-link {
        font-family: Arial, Helvetica, sans-serif;
        font-size: 18px;
        color: #FFFFFF;
        text-decoration: none;
        cursor: pointer;
        text-transform: uppercase;
        letter-spacing:3px;
        transition: font-size 0.15s ease, color 0.15s ease;
      }

      .mixtape-link:hover {
        font-size: 20px;
        color: #FF0000;
      }

      /* Dim state for non-matching items */
      .mixtape-item.dim .mixtape-link {
        color: #666666;
      }

      /* Remove category-based static coloring; handled dynamically via JS */

      #filter-overlay-close {
        position: absolute;
        top: 20px;
        right: 20px;
        font-family: Arial, Helvetica, sans-serif;
        font-size: 24px;
        color: #FF0000;
        background: none;
        border: none;
        cursor: pointer;
      }
      
      
      /* Responsive Design */
      @media (max-width: 1024px) {
        .filter-btn {
          font-size: 20px;
        }
        
        #filters {
          gap: 40px;
        }
        
        #filter-nav {
          padding: 0 20px;
        }
      }
      
      @media (max-width: 768px) {
        .filter-btn {
          font-size: 18px;
        }
        
        #filters {
          gap: 20px;
          flex-wrap: wrap;
        }
        
        #filter-nav {
          height: 40px;
          padding: 0 20px;
          flex-direction: row;
          align-items: center;
          justify-content: space-between;
          background-color: black;
        }
        
        #close-btn {
          align-self: auto;
        }

        /* Show burger menu on mobile */
        #burger-menu {
          display: block;
        }

        /* Hide desktop filters on mobile */
        #filters {
          display: none;
        }

        /* Mobile optimizations */
        #custom-cursor,
        #crosshair-x,
        #crosshair-y {
          display: none;
        }

        .filter-btn:hover,
        #close-btn:hover {
          opacity: 1;
        }
      }
    </style>
  </head>
  <body>
    <!-- Background Image -->
    <div id="bg-image"></div>
    <!-- Navigation Bar with Filters -->
    <nav id="filter-nav">
      <div id="filters">
        <button class="filter-btn active" data-filter="Mixdown">MIXDOWN</button>
        <button class="filter-btn" data-filter="Mastering">MASTERING</button>
      </div>
      <button id="burger-menu">
        <span style="font-family: 'Arial', serif; font-size: 20px; color: #FFFFFF;">V</span>
      </button>
      <a href="/" id="close-btn">X</a>
    </nav>

    <!-- Filter Overlay for Mobile -->
    <div id="filter-overlay">
      <button id="filter-overlay-close">X</button>
      <button class="filter-btn active" data-filter="Mixdown">MIXDOWN</button>
      <button class="filter-btn" data-filter="Mastering">MASTERING</button>
    </div>

    <!-- Mixtapes List -->
    {error && <p style="color: #FF0000; padding: 20px 40px;">{error.message}</p>}
    <div id="mixtapes-list">
      {mixtapes.map((mixtape, index) => (
        <div key={index} class="mixtape-item" data-category={mixtape.category}>
          <a href={mixtape.link} target="_blank" rel="noopener noreferrer" class="mixtape-link">
            {mixtape.title}
          </a>
        </div>
      ))}
    </div>

    <!-- Removed custom cursor image -->
    <div id="crosshair-x"></div>
    <div id="crosshair-y"></div>

    <script>
      // Filter functionality
      const filterButtons = document.querySelectorAll('.filter-btn');
      const burgerMenu = document.getElementById('burger-menu');
      const filterOverlay = document.getElementById('filter-overlay');
      const filterOverlayClose = document.getElementById('filter-overlay-close');

      // Burger menu functionality
      burgerMenu.addEventListener('click', () => {
        filterOverlay.classList.add('active');
      });

      filterOverlayClose.addEventListener('click', () => {
        filterOverlay.classList.remove('active');
      });

      // Close overlay when clicking outside
      filterOverlay.addEventListener('click', (e) => {
        if (e.target === filterOverlay) {
          filterOverlay.classList.remove('active');
        }
      });

      // Utility: apply highlight vs dim without hiding
      function applyFilterHighlight(selected) {
        const mixtapeItems = document.querySelectorAll('.mixtape-item');
        mixtapeItems.forEach(item => {
          const category = item.getAttribute('data-category');
          if (selected === 'Mixdown') {
            item.classList.toggle('dim', category !== 'Mixdown');
          } else if (selected === 'Mastering') {
            item.classList.toggle('dim', category !== 'Mastering');
          }
        });
      }

      // Set default filter on page load
      window.addEventListener('load', () => {
        const activeButton = document.querySelector('.filter-btn.active');
        if (activeButton) {
          const defaultFilter = activeButton.getAttribute('data-filter');
          applyFilterHighlight(defaultFilter);
        }
      });

      filterButtons.forEach(button => {
        button.addEventListener('click', () => {
          const filterValue = button.getAttribute('data-filter');
          
          // Update active state
          filterButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');
          
          // Close overlay immediately after selection
          filterOverlay.classList.remove('active');
          
          // Highlight matches, dim others (do not hide)
          applyFilterHighlight(filterValue);
        });
      });

      // Crosshair lines - only on desktop
      if (window.innerWidth > 768) {
        const crosshairX = document.getElementById('crosshair-x');
        const crosshairY = document.getElementById('crosshair-y');
        
        document.addEventListener('mousemove', (e) => {
          const mouseX = e.clientX;
          const mouseY = e.clientY;
          
          // Update crosshair lines directly (no lag)
          crosshairX.style.top = mouseY + 'px';
          crosshairY.style.left = mouseX + 'px';
        });
      }
    </script>
  </body>
</html>
