---
// src/pages/other.astro
import BaseHead from '../components/BaseHead.astro';
import { SITE_TITLE } from '../consts';
import { supabase } from "../lib/supabaseClient";
import ProjectGridWrapper from "../components/ProjectGridWrapper";

const { data: projectsData, error } = await supabase
  .from("projects")
  .select("*")
  .order("created_at", { ascending: false });

// Transform and filter for "Other" category only (case-insensitive, trims)
const projects = (projectsData?.map((p) => ({
  id: String(p.id),
  title: p.title || '',
  description: p.description || '',
  image: p.thumbnail_url || '',
  category: p.category,
  links: [
    p.link1 && p.link1_text ? { label: p.link1_text, href: p.link1 } : null,
    p.link2 && p.link2_text ? { label: p.link2_text, href: p.link2 } : null,
    p.link3 && p.link3_text ? { label: p.link3_text, href: p.link3 } : null,
  ].filter(Boolean) as { label: string; href: string }[],
})) || []).filter((p) => {
  if (!p.category) return false;
  const toKey = (v: unknown) => String(v).trim().toLowerCase();
  if (Array.isArray(p.category)) {
    return p.category.some((v) => toKey(v) === 'other' || toKey(v).includes('other'));
  }
  const val = toKey(p.category);
  return val === 'other' || val.includes('other');
});
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Other - ${SITE_TITLE}`} description="Other projects" />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      
      body {
        background-color: #000000;
        color: #FFFFFF;
        font-family: Arial, Helvetica, sans-serif;
        min-height: 100vh;
        cursor: auto;
        overflow-x: hidden;
      }
      
      #crosshair-x {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 1px;
        border-top: 1px solid #000000;
        pointer-events: none;
        z-index: 9998;
        transform: translateY(-50%);
      }
      
      #crosshair-y {
        position: fixed;
        top: 0;
        left: 0;
        width: 1px;
        height: 100vh;
        border-left: 1px solid #000000;
        pointer-events: none;
        z-index: 9998;
        transform: translateX(-50%);
      }

      /* Navigation Bar */
      #filter-nav {
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0 40px;
        background-color: #000000;
        position: relative;
      }
      
      #filters {
        display: flex;
        align-items: center;
        gap: 60px;
        flex: 1;
      }
      
      .filter-btn {
        font-family: Arial, Helvetica, sans-serif;
        font-size: 20px;
        letter-spacing: 5px;
        color: #FFFFFF;
        background: none;
        border: none;
        cursor: pointer;
        text-transform: uppercase;
        transition: color 0.3s ease;
        white-space: nowrap;
      }
      
      .filter-btn.active {
        color: #FF0000;
      }

      #close-btn {
        font-family: Arial, Helvetica, sans-serif;
        font-size: 20px;
        color: #FF0000;
        background: none;
        border: none;
        cursor: pointer;
        text-decoration: none;
        transition: opacity 0.3s ease;
      }

      /* Filter Overlay */
      #filter-overlay {
        position: fixed;
        top: 0;
        right: -100%;
        width: 100%;
        height: 100vh;
        background-color: #000000;
        z-index: 1000;
        transition: right 0.3s ease;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 40px;
      }

      #filter-overlay.active { right: 0; }

      #filter-overlay .filter-btn {
        font-family: Arial, Helvetica, sans-serif;
        font-size: 24px;
        margin: 0;
        white-space: normal;
        text-align: center;
        line-height: 40px;
        max-width: 90vw;
        word-wrap: break-word;
        hyphens: auto;
      }

      #filter-overlay-close {
        position: absolute;
        top: 20px;
        right: 20px;
        font-family: Arial, Helvetica, sans-serif;
        font-size: 32px;
        color: #FF0000;
        background: none;
        border: none;
        cursor: pointer;
      }

      #projects-grid-wrapper { width: 100%; background-color: #000000; position: relative; }

      @media (max-width: 768px) {
        #projects-grid-wrapper { contain: layout; }
      }
    </style>
  </head>
  <body>
    <nav id="filter-nav">
      <div id="filters">
        <button class="filter-btn active" data-filter="Other">OTHER</button>
      </div>
      <button id="burger-menu" style="display:none"></button>
      <a href="/" id="close-btn">X</a>
    </nav>

    <div id="filter-overlay" style="display:none">
      <button id="filter-overlay-close">X</button>
      <button class="filter-btn active" data-filter="Other">OTHER</button>
    </div>

    <div id="projects-grid-wrapper">
      <ProjectGridWrapper client:load projects={projects} />
    </div>

    <div id="crosshair-x"></div>
    <div id="crosshair-y"></div>

    <script>
      // Minimal filter handling (only OTHER)
      const filterButtons = document.querySelectorAll('.filter-btn');
      filterButtons.forEach(button => {
        button.addEventListener('click', () => {
          const filterValue = button.getAttribute('data-filter');
          filterButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');
          const event = new CustomEvent('filterChange', { detail: { filter: filterValue } });
          window.dispatchEvent(event);
        });
      });

      // Ensure OTHER filter applies after client components mount
      // Delay dispatch so React `client:load` listeners are attached
      setTimeout(() => {
        const event = new CustomEvent('filterChange', { detail: { filter: 'Other' } });
        window.dispatchEvent(event);
      }, 600);

      if (window.innerWidth > 768) {
        const crosshairX = document.getElementById('crosshair-x');
        const crosshairY = document.getElementById('crosshair-y');
        document.addEventListener('mousemove', (e) => {
          const mouseX = e.clientX; const mouseY = e.clientY;
          crosshairX.style.top = mouseY + 'px';
          crosshairY.style.left = mouseX + 'px';
        });
      }
    </script>
  </body>
</html>

